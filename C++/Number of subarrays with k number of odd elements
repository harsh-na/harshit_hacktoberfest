// contributed by sachin raj

 int numberOfSubarrays(vector<int>& nums, int k) {
     unordered_map<int,int>m;
     int n=nums.size();
     int cnt=0;
     // for every odd i will store number of immediate even numbers in front of him
     for(int i=0;i<n;i++){ 
       if(nums[i]%2==0)cnt++;
       else if(nums[i]%2!=0){
           m[i]=cnt;
           cnt=0;
       }
     } 
    // Number of even number infront of every odd from back and i will store it into m2
    cnt=0;
    unordered_map<int,int>m2;
    for(int i=n-1;i>=0;i--){
        if(nums[i]%2==0)cnt++;
        else if(nums[i]%2!=0){
            m2[i]=cnt;
            cnt=0;
        }
    }
    
    // we need to processed m2 carefully bcoz job is not done
    
    queue<int>q;// i will store my all the k elements here make sure that size of q will always be k;
    int ans=0;
    int idx=0;
    int p=0;
    for(int i=n-1;i>=0;i--){
        if(nums[i]%2!=0){
            q.push(i);
           idx++;
           if(idx==k){
               // searching for my backward
              int backward=m2[q.front()]; // because number of evens after the front element in the queue bcoz it will contribute in our answer
              q.pop();
              int forward=m[i];
              // suppose
              // 2 2 1 2 3 2 2 and k =2
              // ans= [1 2 3],[1 2 3 2],[1 2 3 2 2],[2 1 2 3],[2 2 1 2 3],[2 1 2 3 2],[2 1 2 3 2 2],[2 2 1 2 3 2],[ 2 2 1 2 3 2 2]
              
              ans=ans+1+forward+backward+forward*backward;  
              idx=idx-1;
           }
        }
       
    }
     return ans;
    }
